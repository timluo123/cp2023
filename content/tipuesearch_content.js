var tipuesearch = {"pages": [{'title': 'About', 'text': 'https://github.com/mdecycu/cmsite \n', 'tags': '', 'url': 'About.html'}, {'title': 'W5', 'text': '// 包含標準輸出入程式庫的標頭文件\n// https://blog.csdn.net/weixin_38468077/article/details/101069365\n// http://www.gnuplot.info/demo/\n// https://github.com/sysprog21/rv32emu\n// https://github.com/sysprog21/semu \n// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3\n// https://cs61c.org/fa23/\n// https://greenteapress.com/wp/think-python-2e/\n// https://github.com/ecalvadi/c99-examples\n// https://github.com/gouravthakur39/beginners-C-program-examples\n// https://github.com/ergenekonyigit/Numerical-Analysis-Examples\n// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf\n// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf\n// https://jsommers.github.io/cbook/cbook.pdf\n// https://jsommers.github.io/cbook/index.html\n// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf\n// http://cslibrary.stanford.edu/101/EssentialC.pdf\n// https://publications.gbdirect.co.uk/c_book/\n// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf\n// ***** execute on replit \n// cd downloads\n// cc gnuplot_ex1.c -o gnuplot_ex1\n// ./gnuplot_ex1\n#include <stdio.h>\n   \n// 主函式\nint main() {\n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n   \n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal png font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'./../images/gnuplot_ex1.png\'\\n");\n    fprintf(gnuplotPipe, "plot sin(x)");\n    // Close popen\n    pclose(gnuplotPipe);\n   \n    return 0;\n} \n \n \n clear \n cd downloads \n cc gnuplot_ex1.c \n ./a.out \n', 'tags': '', 'url': 'W5.html'}, {'title': 'w6', 'text': '\n', 'tags': '', 'url': 'w6.html'}, {'title': '美國', 'text': '\n #include <stdio.h> \n#include <gd.h> \n#include <數學.h> \n \n無效draw_usa_flag（gdImagePtr img）； \nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double spin_angle); \n \nint main() { \n    整數寬度=800； \n    int 高度 = (int)(寬度 / 1.9); \n \n    gdImagePtr img = gdImageCreateTrueColor(寬度, 高度); \n    gdImageAlphaBlending(img, 0); \n \n    繪製_美國_標誌（img）； \n \n    FILE *outputFile = fopen("./../images/usa_flag.png", "wb"); \n    如果（輸出檔== NULL）{ \n        fprintf(stderr, "開啟輸出檔時發生錯誤。\\n"); \n        返回1； \n    } \n \n    gdImagePngEx(img, 輸出檔, 9); \n    fclose(輸出檔); \n    gdImageDestroy(img); \n \n    返回0； \n} \n \n無效draw_usa_flag（gdImagePtr img）{ \n    int 寬度 = gdImageSX(img); \n    int 高度 = gdImageSY(img); \n    int 紅、白、藍； \n    // 國旗顏色 \n    紅色 = gdImageColorAllocate(img, 178, 34, 52);  // 紅色條紋 \n    白色 = gdImageColorAllocate(img, 255, 255, 255);  // 白色條紋 \n    藍色 = gdImageColorAllocate(img, 60, 59, 110);  // 藍色 \n \n    int stripe_height = 高度 / 13; \n    int stripe_width = 寬度； \n    int star_size = (int)(0.0308 * 高度);  // 星星大小 \n \n    for (int y = 0; y < 高度; y += stripe_height) { \n        if (y / stripe_height % 2 == 0) { \n            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, 紅色); \n        } 別的 { \n            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, 白色); \n        } \n    } \n \n    gdImageFilledRectangle(img, 0, 0, 寬度 * 2 / 5, stripe_height * 7, 藍色); \n \n    int star_spacing_x = (int)(0.129 * 高度);  // 橫向恆星之間的距離 \n    int star_spacing_y = (int)(0.054 * 高度);  // 縱向星星之間的距離 \n    int star_start_x = (int)(0.125 * 高度);  // 星星的起始X位置 \n    int star_start_y = (int)(0.0485 * 高度);  // 恆星的起始Y位置 \n \n    for (int row = 0; row < 9; row++) { \n        int starPerRow = (行 % 2 == 0) ?  6：5； \n \n        // 計算2、4、6和8排星星的偏移量 \n        int offset_x = (行 % 2 == 0) ?  star_spacing_x / -2 : 0; \n \n        for (int star = 0; star < starPerRow; star++) { \n            int x = star_start_x + star * star_spacing_x + offset_x; \n \n            // 旋轉角度（以弧度為單位） \n            雙旋轉角度 = M_PI / 5;  // 忘記旋轉多少度 \n \n            int y = star_start_y + 行 * star_spacing_y; \n            draw_star(img, x, y, star_size, 白色, 旋轉角度); \n        } \n    } \n} \n \nvoid draw_star(gdImagePtr img, int x, int y, int 大小, int 顏色, 雙rotation_angle) { \n    gdPoint點[10]； \n \n    for (int i = 0; i < 10; i++) { \n        雙倍角度 = M_PI / 2 + i * 2 * M_PI / 10 + 旋轉角度； \n        int 半徑 = (i % 2 == 0) ?  尺寸：尺寸/2； \n        點[i].x = x + 半徑 * cos(角); \n        點[i].y = y + 半徑 * sin(角); \n    } \n \n    // 使用指定的顏色填滿星星 \n    gdImageFilledPolygon(img, 點, 10, 顏色); \n} \n \n 清除 \n cd 下載 cc gd_roc_flag.c -lgd -lm  ./a.out \n \n', 'tags': '', 'url': '美國.html'}, {'title': '台灣', 'text': '\n #include <stdio.h> \n#include <gd.h> \n#include <數學.h> \n \n無效draw_roc_flag（gdImagePtr img）； \nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue); \n \nint main() { \n    // width 3: height 2 \n    int width = 1200; \n    int height = (int)(width*2.0 / 3.0); \n \n    gdImagePtr img = gdImageCreateTrueColor(width, height); \n    gdImageAlphaBlending(img, 0); \n \n    draw_roc_flag(img); \n \n    FILE *outputFile = fopen("./roc_flag.png", "wb"); \n    if (outputFile == NULL) { \n        fprintf(stderr, "Error opening the output file.\\n"); \n        return 1; \n    } \n    gdImagePngEx(img, outputFile, 9); \n    fclose(outputFile); \n    gdImageDestroy(img); \n    return 0; \n} \n \nvoid draw_roc_flag(gdImagePtr img) { \n    int width = gdImageSX(img); \n    int height = gdImageSY(img); \n    int red, white, blue; \n    int center_x = (int)(width/4); \n    int center_y = (int)(height/4); \n    int sun_radius = (int)(width/8); \n \n    // Colors for the flag \n    red = gdImageColorAllocate(img, 242, 0, 0); // Red color \n    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes \n    blue = gdImageColorAllocate(img, 0, 41, 204); // Blue \n \n    // 繪製紅色矩形區域 \n    gdImageFilledRectangle(img, 0, 0, width, height, red); \n \n    // 繪製藍色矩形區域 \n    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue); \n \n    // 繪製太陽 \n    draw_white_sun(img, center_x, center_y, sun_radius, white, red, blue); \n} \nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue) { \n    float angle = 0; \n    int numRays = 12; // 光芒的數量 \n \n    gdPoint points[3]; // 三個頂點的陣列 \n \n    for (int i = 0; i < numRays; i++) { \n        angle = i * (2 * M_PI / numRays); \n        float x1 = center_x + cos(angle) * sun_radius; \n        float y1 = center_y + sin(angle) * sun_radius; \n \n        // 調整兩個底邊頂點的位置 \n      float x2 = center_x + cos(angle + 0.35) * (sun_radius * 0.5); \n      float y2 = center_y + sin(angle + 0.35) * (sun_radius * 0.5); \n      float x3 = center_x + cos(angle - 0.35) * (sun_radius * 0.5); \n      float y3 = center_y + sin(angle - 0.35) * (sun_radius * 0.5); \n \n        // 設定多邊形的三個頂點 \n        points[0].x = (int)x1; \n        points[0].y = (int)y1; \n        points[1].x = (int)x2; \n        points[1].y = (int)y2; \n        points[2].x = (int)x3; \n        points[2].y = (int)y3; \n \n        gdImageFilledPolygon(img, points, 3, white); \n    } \n  //外圈 \n  gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.2, sun_radius * 1.2, 藍色); \n   \n    // 相似太陽內部 \n    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.1, sun_radius * 1.1, 白色); \n} \n \n \n 清除 \n cd 下載 cc gd_roc_flag.c -lgd -lm  ./a.out \n', 'tags': '', 'url': '台灣.html'}, {'title': 'w7', 'text': '', 'tags': '', 'url': 'w7.html'}, {'title': '韓國', 'text': '#include <stdio.h> \n#include <gd.h> \n#include <math.h> \n  \n#define WIDTH 900 \n#define HEIGHT 600 \n#define FILENAME "south_korea_flag.png" \n  \nint main() { \n    gdImagePtr im; \n    FILE *pngout; \n    int white, black, red, blue; \n  \n    im = gdImageCreate(WIDTH, HEIGHT); \n  \n    white = gdImageColorAllocate(im, 255, 255, 255); \n    black = gdImageColorAllocate(im, 0, 0, 0); \n    red = gdImageColorAllocate(im, 205, 0, 0); \n    blue = gdImageColorAllocate(im, 0, 56, 168); \n  \n    // Background (white) \n    gdImageFilledRectangle(im, 0, 0, WIDTH, HEIGHT , white); \n  \n    // Blue Circle (Yin-Yang Symbol) \n    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 210, 30, red, gdArc); \n  \n    // Red Circle (Yin-Yang Symbol) \n    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 30, 210, blue, gdArc); \n  \n  int circleX = 385;    // 圓心的 X 座標 \n  int circleY = 262.5;   // 圓心的 Y 座標 \n  int circleRadius = 75;      \n  \n  // 繪製圓形 \n  gdImageFilledEllipse(im, circleX, circleY, circleRadius * 2, circleRadius * 2, red); \n  \n  int circleX2 = 515;    // 圓心的 X 座標 \n    \n int circleY2 = 337.5; \n  \n  // 繪製圓形 \n  gdImageFilledEllipse(im, circleX2, circleY2, circleRadius * 2, circleRadius * 2, blue); \n    \n  { \n      \n    \n  // 起點和終點位置 \n    \n  int startX = 340;     \n  // 線的起點 X 座標 \n    \n  int startY = 90;    \n  // 線的起點 Y 座標 \n    \n  int endX = 200;      \n  // 線的終點 X 座標 \n    \n  int endY = 260;      \n  // 線的終點 Y 座標 \n   \n  int lineWidth = 23;  // 線的寬度 \n  \n  // 繪製線段 \n  gdImageSetThickness(im, lineWidth); \n  gdImageLine(im, startX, startY, endX, endY, black); \n  // 繪製線段 \n  gdImageSetThickness(im, lineWidth); \n  gdImageLine(im, startX -35, startY -10, endX -35, endY -10, black); \n  \n  // 繪製線段 \n  gdImageSetThickness(im, lineWidth); \n  gdImageLine(im, startX -70, startY -20, endX -70, endY -20, black); \n  \n  int startX2 = 213;     \n  // 線的起點 X 座標 \n  \n  int startY2 = 270;    \n  // 線的起點 Y 座標 \n  \n  int endX2 = 133;      \n  // 線的終點 X 座標 \n  \n  int endY2 = 210;      \n  // 線的終點 Y 座標 \n  \n  int lineWidth2 = 25;  // 線的寬度 \n  \n  // 繪製線段 \n  gdImageSetThickness(im, lineWidth); \n  gdImageLine(im, startX2 +3, startY2, endX2 +3, endY2, white); \n  \n  gdImageSetThickness(im, lineWidth +10); \ngdImageLine(im, startX2 -17, startY2 +9 , endX2 -17, endY2 +9 , white); \n  \n  gdImageSetThickness(im, lineWidth ); \ngdImageLine(im, startX2 +115, startY2 -145, endX2 +115, endY2 -145, white); \n  \n  gdImageSetThickness(im, lineWidth); \ngdImageLine(im, startX2 +120, startY2 -155, endX2 +120, endY2 -155, white); \n  \n  gdImageSetThickness(im, lineWidth +12); \ngdImageLine(im, startX2 +145, startY2 -155, endX2 +145, endY2 -155, white); \n} \n  { \n    // 起點和終點位置 \n    \n  int startX = 330;     \n  // 線的起點 X 座標 \n    \n  int startY = 520;    \n  // 線的起點 Y 座標 \n    \n  int endX = 190;      \n  // 線的終點 X 座標 \n    \n  int endY = 350;      \n  // 線的終點 Y 座標 \n   \n  int lineWidth = 23;  // 線的寬度 \n  \n  // 繪製線段 \n  gdImageSetThickness(im, lineWidth); \n  gdImageLine(im, startX, startY, endX, endY, black); \n  // 繪製線段 \n  gdImageSetThickness(im, lineWidth); \n  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black); \n  \n  // 繪製線段 \n  gdImageSetThickness(im, lineWidth); \n  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black); \n  \n  int startX2 = 213;     \n  // 線的起點 X 座標 \n  \n  int startY2 = 330;    \n  // 線的起點 Y 座標 \n  \n  int endX2 = 133;      \n  // 線的終點 X 座標 \n  \n  int endY2 = 390;      \n  // 線的終點 Y 座標 \n  \n  int lineWidth2 = 25;  // 線的寬度 \n  \n  // 繪製線段 \n  gdImageSetThickness(im, lineWidth +8); \n  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white); \n  \n  gdImageSetThickness(im, lineWidth +10); \ngdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white); \n  \n  gdImageSetThickness(im, lineWidth ); \ngdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white); \n  \n  gdImageSetThickness(im, lineWidth); \ngdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white); \n  \n  gdImageSetThickness(im, lineWidth +14); \ngdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white); \n  \n    gdImageSetThickness(im, lineWidth -10); \ngdImageLine(im, 232, 426, 206, 448, white); \n  \n  } \n  \n  { \n    // 起點和終點位置 \n    \n  int startX = 564;     \n  // 線的起點 X 座標 \n    \n  int startY = 520;    \n  // 線的起點 Y 座標 \n    \n  int endX = 704;      \n  // 線的終點 X 座標 \n    \n  int endY = 350;      \n  // 線的終點 Y 座標 \n   \n  int lineWidth = 23;  // 線的寬度 \n      \n  // 繪製線段 \n  gdImageSetThickness(im, lineWidth); \n  gdImageLine(im, startX +70, startY +20, endX +70, endY +20, black); \n  \n    // 繪製線段 \n  gdImageSetThickness(im, lineWidth); \n  gdImageLine(im, startX, startY, endX, endY, black); \n  \n    // 繪製線段 \n  gdImageSetThickness(im, lineWidth); \n  gdImageLine(im, startX +35, startY +10, endX +35, endY +10, black); \n      \ngdImageSetThickness(im, lineWidth -10); \ngdImageLine(im, 624, 400, 734, 490, white); \n      \n  int startX2 = 553;     \n  // 線的起點 X 座標 \n  \n  int startY2 = 330;    \n  // 線的起點 Y 座標 \n  \n  int endX2 = 633;      \n  // 線的終點 X 座標 \n  \n  int endY2 = 390;      \n  // 線的終點 Y 座標 \n  \n  int lineWidth2 = 25;  // 線的寬度 \n  \n  // 繪製線段 \n  gdImageSetThickness(im, lineWidth +8); \n  gdImageLine(im, startX2 +139, startY2, endX2 +139, endY2, white); \n  \n  gdImageSetThickness(im, lineWidth +10); \ngdImageLine(im, startX2 +157, startY2 -9 , endX2 +157, endY2 -9 , white); \n  \n  gdImageSetThickness(im, lineWidth); \ngdImageLine(im, startX2 +25, startY2 +155, endX2 +25, endY2 +155, white); \n  \n  gdImageSetThickness(im, lineWidth +30); \ngdImageLine(im, startX2 -3, startY2 +170, endX2 , endY2 +170, white); \n  } \n  { \n    // 起點和終點位置 \n    \n  int startX = 330;     \n  // 線的起點 X 座標 \n    \n  int startY = 520;    \n  // 線的起點 Y 座標 \n    \n  int endX = 190;      \n  // 線的終點 X 座標 \n    \n  int endY = 350;      \n  // 線的終點 Y 座標 \n   \n  int lineWidth = 23;  // 線的寬度 \n  \n  // 繪製線段 \n  gdImageSetThickness(im, lineWidth); \n  gdImageLine(im, startX, startY, endX, endY, black); \n  // 繪製線段 \n  gdImageSetThickness(im, lineWidth); \n  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black); \n  \n  // 繪製線段 \n  gdImageSetThickness(im, lineWidth); \n  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black); \n  \n  int startX2 = 213;     \n  // 線的起點 X 座標 \n  \n  int startY2 = 330;    \n  // 線的起點 Y 座標 \n  \n  int endX2 = 133;      \n  // 線的終點 X 座標 \n  \n  int endY2 = 390;      \n  // 線的終點 Y 座標 \n  \n  int lineWidth2 = 25;  // 線的寬度 \n  \n  // 繪製線段 \n  gdImageSetThickness(im, lineWidth +8); \n  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white); \n  \n  gdImageSetThickness(im, lineWidth +10); \ngdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white); \n  \n  gdImageSetThickness(im, lineWidth ); \ngdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white); \n  \n  gdImageSetThickness(im, lineWidth); \ngdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white); \n  \n  gdImageSetThickness(im, lineWidth +14); \ngdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white); \n  \n    gdImageSetThickness(im, lineWidth -10); \ngdImageLine(im, 232, 426, 206, 448, white); \n  \n  } \n  { \n    // 起點和終點位置 \n    \n  int startX = 564;     \n  // 線的起點 X 座標 \n    \n  int startY = 97;    \n  // 線的起點 Y 座標 \n    \n  int endX = 704;      \n  // 線的終點 X 座標 \n    \n  int endY = 267;      \n  // 線的終點 Y 座標 \n   \n  int lineWidth = 23;  // 線的寬度 \n      \n  // 繪製線段 \n  gdImageSetThickness(im, lineWidth); \n  gdImageLine(im, startX +70, startY -20, endX +70, endY -20, black); \n  \n    // 繪製線段 \n  gdImageSetThickness(im, lineWidth); \n  gdImageLine(im, startX, startY, endX, endY, black); \n  \n    gdImageSetThickness(im, lineWidth -10); \ngdImageLine(im, 624, 212, 734, 118, white); \n      \n    // 繪製線段 \n  gdImageSetThickness(im, lineWidth); \n  gdImageLine(im, startX +35, startY -10, endX +35, endY -10, black); \n      \n  int startX2 = 553;     \n  // 線的起點 X 座標 \n  \n  int startY2 = 277;    \n  // 線的起點 Y 座標 \n  \n  int endX2 = 633;      \n  // 線的終點 X 座標 \n  \n  int endY2 = 217;      \n  // 線的終點 Y 座標 \n  \n  int lineWidth2 = 25;  // 線的寬度 \n  \n  // 繪製線段 \n  gdImageSetThickness(im, lineWidth +8); \n  gdImageLine(im, startX2 +134, startY2, endX2 +134, endY2, white); \n  \n  gdImageSetThickness(im, lineWidth +10); \ngdImageLine(im, startX2 +157, startY2 +9 , endX2 +157, endY2 +9 , white); \n  \n  gdImageSetThickness(im, lineWidth); \ngdImageLine(im, startX2 +25, startY2 -155, endX2 +25, endY2 -155, white); \n  \n    gdImageSetThickness(im, lineWidth +30); \ngdImageLine(im, startX2 -5, startY2 -155, endX2 -5, endY2 -155, white); \n  \n  } \n    \n    // Save image \nFILE *outputFile = fopen("./../images/korea_flag.png", "wb"); \nif (outputFile == NULL) { \n    fprintf(stderr, "Error opening the output file.\\n"); \n    return 1; \n} \n  gdImagePngEx(im, outputFile, 9); \n      fclose(outputFile); \n      gdImageDestroy(im); \n      return 0; \n  } \n \n \n \n clear \n \n cd downloads \n cc gd_korean_flag.c -lgd -lm \n ./a.out \n', 'tags': '', 'url': '韓國.html'}, {'title': '英國', 'text': '#include <stdio.h> \n#include <gd.h> \n#include <math.h> \n \nvoid draw_uk_flag(gdImagePtr img); \nvoid fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color); \n \nint main() { \n    // 设置国旗的宽和高 \n    int width = 1200; \n    int height = width / 2; \n \n    // 创建图像 \n    gdImagePtr img = gdImageCreateTrueColor(width, height); \n    gdImageAlphaBlending(img, 0); \n \n    // 绘制英国国旗 \n    draw_uk_flag(img); \n \n    // 将图像保存到文件 \n    FILE *outputFile = fopen("./../images/uk_flag.png", "wb"); \n    if (outputFile == NULL) { \n        fprintf(stderr, "打开输出文件时发生错误。\\n"); \n        return 1; \n    } \n    gdImagePngEx(img, outputFile, 9); \n    fclose(outputFile); \n    gdImageDestroy(img); \n    return 0; \n} \n \n \n \nvoid draw_uk_flag(gdImagePtr img) { \n    int width = gdImageSX(img); \n    int height = gdImageSY(img); \n \n    int red, white, blue; \n    red = gdImageColorAllocate(img, 204, 0, 0);       // 红色 \n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色 \n    blue = gdImageColorAllocate(img, 0, 0, 153);      // 蓝色 \n \n    gdImageFilledRectangle(img, 0, 0, width, height, blue); \n \n \n  int x1, y1, x2, y2, x3, y3; \n  { \n    int line_thickness = 100; \n    gdImageSetThickness(img, line_thickness); \n \n    int x1, y1, x2, y2, x3, y3; \n \n    // 绘制白色斜线 \n    x1 = 0; \n    y1 = 600; \n    x2 = 1200; \n    y2 = 0; \n    gdImageLine(img, x1, y1, x2, y2, white); \n \n    x1 = 0; \n    y1 = 0; \n    x2 = 1200; \n    y2 = 600; \n    gdImageLine(img, x1, y1, x2, y2, white); \n} \n  { \n    int line_thickness = 33; \n    gdImageSetThickness(img, line_thickness); \n \n \n    // 绘制红色斜线 \n    x1 = 566; \n    y1 = 300; \n    x2 = 1166; \n    y2 = 0; \n    gdImageLine(img, x1, y1, x2, y2, red); \n \n    x1 = 1233; \n    y1 = 600; \n    x2 = 633; \n    y2 = 300; \n    gdImageLine(img, x1, y1, x2, y2, red); \n \n    x1 = 566; \n    y1 = 300; \n    x2 = -33; \n    y2 = 0; \n    gdImageLine(img, x1, y1, x2, y2, red); \n \n    x1 = 600; \n    y1 = 316.5; \n    x2 = 0; \n    y2 = 616.5; \n    gdImageLine(img, x1, y1, x2, y2, red); \n  } \n  { \n  int line_thickness = 33; \n  gdImageSetThickness(img, line_thickness); \n \n  int x1, y1, x2, y2, x3, y3; \n \n  // 绘制  斜线 \n  x1 = 0; \n  y1 = 600; \n  x2 = 1200; \n  y2 = 0; \n  gdImageLine(img, x1, y1, x2, y2, red ); \n \n \n  x1 = 1200; \n    y1 = 16.5; \n    x2 = 600; \n    y2 = 316.5; \n    gdImageLine(img, x1, y1, x2, y2, white); \n \n \n  x1 = 0; \n    y1 = 583.5; \n    x2 = 600; \n    y2 = 283.5; \n    gdImageLine(img, x1, y1, x2, y2, white); \n \n \n  } \n \n    // 绘制白色十字 \n    int cross_width = width / 32; \n    int cross_arm_width = width / 32; \n    int center_x = width / 2; \n    int center_y = height / 2; \n \n    gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white); \n    gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white); \n \n    // 绘制红色十字 \n    gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red); \n    gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red); \n} \n \n \n clear \n cd downloads cc gd_uk_flag.c -lgd -lm  ./a.out \n \xa0 \n', 'tags': '', 'url': '英國.html'}, {'title': '日本', 'text': '#include <stdio.h> \n#include <gd.h> \n#include <math.h> \n \nvoid draw_japan_flag(gdImagePtr img); \nvoid draw_red_circle(gdImagePtr img, int center_x, int center_y, int circle_radius, int red); \n \nint main() { \n    // 日本國旗的寬高比為2:3 \n    int width = 1200; \n    int height = (int)(width * 2.0 / 3.0); \n \n    gdImagePtr img = gdImageCreateTrueColor(width, height); \n    gdImageAlphaBlending(img, 0); \n \n    draw_japan_flag(img); \n \n  FILE *outputFile = fopen("./../images/japan_flag.png", "wb"); \n  if (outputFile == NULL) { \n      fprintf(stderr, "打开输出文件时出错。\\n"); \n      return 1; \n  } \n    gdImagePngEx(img, outputFile, 9); \n    fclose(outputFile); \n    gdImageDestroy(img); \n    return 0; \n} \n \nvoid draw_japan_flag(gdImagePtr img) { \n    int width = gdImageSX(img); \n    int height = gdImageSY(img); \n    int red; \n    int center_x = (int)(width / 2); \n    int center_y = (int)(height / 2); \n    int circle_radius = (int)(width / 5); // 取旗面寬度的1/5為圓的半徑 \n \n    // 顏色 \n    red = gdImageColorAllocate(img, 186, 12, 47); // 日本國旗的紅色 \n \n    // 繪製白色矩形背景 \n    gdImageFilledRectangle(img, 0, 0, width, height, gdImageColorAllocate(img, 255, 255, 255)); \n \n    // 繪製紅色圓圈 \n    draw_red_circle(img, center_x, center_y, circle_radius, red); \n} \n \nvoid draw_red_circle(gdImagePtr img, int center_x, int center_y, int circle_radius, int red) { \n    // 繪製紅色圓圈 \n    gdImageFilledEllipse(img, center_x, center_y, circle_radius * 2, circle_radius * 2, red); \n} \n \n \n \n clear \n cd downloads cc gd_japan_flag.c -lgd -lm ./a.out \n', 'tags': '', 'url': '日本.html'}, {'title': '中國', 'text': '#include <stdio.h> \n#include <gd.h> \n#include <數學.h> \n  \n無效draw_chinese_flag(gdImagePtr img); \n  \nint main() { \n    整數寬度=300； // 國旗寬度 \n    整數高度=200； // 國旗高度 \n  \n    gdImagePtr im = gdImageCreateTrueColor(寬度, 高度); \n    gdImageAlphaBlending(im, 0); \n  \n    繪製中文標誌（im）； \n  \n    FILE *outputFile = fopen("./../images/proc_flag.png", "wb"); \n    如果（輸出檔== NULL）{ \n        fprintf(stderr, "開啟輸出檔時發生錯誤。\\n"); \n        返回1； \n    } \n  \n    gdImagePngEx(im, 輸出檔, 9); \n    fclose(輸出檔); \n    gdImageDestroy(im); \n  \n    返回0； \n} \n  \n//聲明draw_star函數 \nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double spin_angle); \n  \n無效draw_chinese_flag（gdImagePtr img）{ \n    int 寬度 = gdImageSX(img); \n    int 高度 = gdImageSY(img); \n    int 紅色、黃色； \n  \n    // 國旗顏色 \n    紅色 = gdImageColorAllocate(img, 255, 0, 0);  // 紅色背景 \n    黃色 = gdImageColorAllocate(img, 255, 255, 0);  // 黃色星星 \n  \n    // 畫紅色背景 \n    gdImageFilledRectangle(img, 0, 0, 寬度, 高度, 紅色); \n  \n    // 設定星星的大小和位置 \n    int star_size = (int)(0.28 * 高度); \n    int star_x = (int)(0.165 * 寬度); \n    int star_y = (int)(0.265 * 高度); \n  \n    //畫大星星 \n    draw_star(img, star_x, star_y, star_size, 黃色, 11.0); \n  \n    // 鄰近小恆星，位置依實際國旗比例計算 \n    雙半徑 = 0.15 * 高度； \n    雙倍角度 = 360 / 7 * M_PI / 179.0； \n    雙旋轉 = -M_PI / 7.5； \n    int cx = (int)(0.32 * 寬度); \n    int cy = (int)(0.27 * 高度); \n  \n    for (int i = -1; i < 3; i++) { \n        int x = (int)(cx + 半徑 * cos(i * 角度 + 旋轉)); \n        int y = (int)(cy + 半徑 * sin(i * 角度 + 旋轉)); \n        draw_star(img, x, y, 19, 黃色, M_PI / 5.0); \n    } \n} \n  \nvoid draw_star(gdImagePtr img, int x, int y, int 大小, int 顏色, 雙rotation_angle) { \n    gdPoint點[10]； \n  \n    // 計算星形的五個外點和五個內點 \n    雙外半徑 = 大小 / 2； \n    雙內半徑 = 大小 / 6； \n    雙倍角度 = M_PI / 5.0； \n  \n    for (int i = 0; i < 10; i++) { \n        雙半徑 = (i % 2 == 0) ?  外半徑：內半徑； \n        雙 theta = 旋轉角度 + i * 角度； \n        點[i].x = x + 半徑 * cos(theta); \n        點[i].y = y + 半徑 * sin(theta); \n    } \n  \n    // 使用 gdImageFilledPolygon 較差星形 \n    gdImageFilledPolygon(img, 點, 10, 顏色); \n} \n \n \n 清除 \n cd 下載 cc gd_proc_flag.c -lgd -lm  ./a.out \n \n', 'tags': '', 'url': '中國.html'}, {'title': 'w12', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n \nint main() {\n    int width = 800;\n    int height = 600;\n \n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n \n    FILE *outputFile = fopen("hellogd.png", "wb");\n    if (outputFile == NULL) {\n \nfprintf(stderr, "Error opening the output file.\\n");\n \nreturn 1;\n    }\n \n    int red = gdImageColorAllocate(img, 255, 0, 0);\n    int blue = gdImageColorAllocate(img, 0, 0, 255);\n    int black = gdImageColorAllocate(img, 0, 0, 0);\n    int white = gdImageColorAllocate(img, 255, 255, 255);\n    // 長方形塗色\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n    gdImageFilledRectangle(img, 0, 0, (int)width/4, (int)height/4, blue);\n    // 橢圓形塗色\n    gdImageFilledEllipse(img, (int)width*3/4, (int)height/4, (int)width/4, (int)width/4, red);\n    // 橢圓形畫線\n    gdImageEllipse(img, (int)width*3/4, (int)height*3/4, (int)width/4, (int)width/4, red);\n    // 畫直線\n    gdImageLine(img, (int)width/2, (int)height/2, (int)width/2, (int)height/2 + 100, blue);\n \n    // 多邊形畫線\n    gdPoint points[4];\n    points[0].x = (int)width/4;\n    points[0].y = (int)height*3/4;\n    points[1].x = points[0].x + 100;\n    points[1].y = points[0].y;\n    points[2].x = points[1].x;\n    points[2].y = points[1].y + 100;\n    points[3].x = points[2].x - 100;\n    points[3].y = points[2].y;\n    gdImagePolygon(img, points, 4, black);\n \n    // 多邊形塗色\n    gdPoint points2[4];\n    points2[0].x = (int)width/3;\n    points2[0].y = (int)height/2;\n    points2[1].x = points2[0].x + 100;\n    points2[1].y = points2[0].y;\n    points2[2].x = points2[1].x;\n    points2[2].y = points2[1].y + 100;\n    points2[3].x = points2[2].x - 150;\n    points2[3].y = points2[2].y;\n    gdImageFilledPolygon(img, points2, 4, red);\n \n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n} \n \n \n \n clear \n \n cd downloads \n cc hello.c -lgd -lm \n ./a.out \n', 'tags': '', 'url': 'w12.html'}, {'title': 'w13', 'text': '// 包含標準輸出入程式庫的標頭文件\n#include <stdio.h>\n \n// 主函式\nint main() {\n    // Open a file to write displacement and velocity data\n    FILE *outputFile = fopen("motion_data.txt", "w");\n    if (!outputFile) {\n        fprintf(stderr, "Failed to create data file.\\n");\n        return 1;\n    }\n \n    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file\n    double x = 0.2;  // Initial displacement\n    double v = 0.0;  // Initial velocity\n    double dt = 0.01; // Time step\n    double t = 0.0;  // Time\n \n    while (t <= 10.0) {\n        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here\n        v += acceleration * dt;\n        x += v * dt;\n \n        fprintf(outputFile, "%lf %lf %lf\\n", t, x, v);\n \n        t += dt;\n    }\n \n    // Close the data file\n    fclose(outputFile);\n \n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n \n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'./../images/motion_plot.png\'\\n");\n    fprintf(gnuplotPipe, "set title \'Displacement and Velocity vs. Time\'\\n");\n    fprintf(gnuplotPipe, "set xlabel \'Time (s)\'\\n");\n    fprintf(gnuplotPipe, "set ylabel \'Displacement (m)\'\\n");\n    fprintf(gnuplotPipe, "plot \'motion_data.txt\' using 1:2 with lines lw 2 title \'Displacement\', \\\n                             \'motion_data.txt\' using 1:3 with lines lw 2 title \'Velocity\'\\n");\n \n    // Close the Gnuplot process\n    fprintf(gnuplotPipe, "exit\\n");\n    pclose(gnuplotPipe);\n \n    return 0;\n} \n \n 明確 \n \n cd 下載 cc  euler_gnuplot_msd_ex1.c  -lgd -lm  ./a.out \n', 'tags': '', 'url': 'w13.html'}, {'title': 'W15', 'text': '(1) \n 根據 roc_list_coord_flag.7z 方案內容所印出的六組ABED等相關中華民國國旗白日圖案中的菱形四個關鍵點，請直接在青天與滿地紅的圖案中，利用白色作為畫線顏色，將第一個兩個一組ABED等四點的座標，以直線相連。 \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\xa0\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n\xa0\nint main() {\n\xa0\xa0\xa0\xa0// width 3: height 2\n\xa0\xa0\xa0\xa0int width = 1200;\n\xa0\xa0\xa0\xa0// 國旗長寬比為 3:2\n\xa0\xa0\xa0\xa0int height = (int)(width * 2.0 / 3.0);\n\xa0\n\xa0\xa0\xa0\xa0gdImagePtr img = gdImageCreateTrueColor(width, height);\n\xa0\xa0\xa0\xa0gdImageAlphaBlending(img, 0);\n\xa0\n\xa0\xa0\xa0\xa0draw_roc_flag(img);\n\xa0\n\xa0\xa0\xa0\xa0FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");\n\xa0\xa0\xa0\xa0if (outputFile == NULL) {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0fprintf(stderr, "Error opening the output file.\\n");\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return 1;\n\xa0\xa0\xa0\xa0}\n\xa0\xa0\xa0\xa0gdImagePngEx(img, outputFile, 9);\n\xa0\xa0\xa0\xa0fclose(outputFile);\n\xa0\xa0\xa0\xa0gdImageDestroy(img);\n\xa0\xa0\xa0\xa0return 0;\n}\n\xa0\nvoid draw_roc_flag(gdImagePtr img) {\n\xa0\xa0\xa0\xa0int width = gdImageSX(img);\n\xa0\xa0\xa0\xa0int height = gdImageSY(img);\n\xa0\xa0\xa0\xa0int red, white, blue;\n\xa0\n\xa0\xa0\xa0\xa0// 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處\n\xa0\xa0\xa0\xa0int center_x = (int)(width / 4);\n\xa0\xa0\xa0\xa0int center_y = (int)(height / 4);\n\xa0\n\xa0\xa0\xa0\xa0int sun_radius = (int)(width / 8);\n\xa0\xa0\xa0\xa0int white_circle_dia = sun_radius;\n\xa0\xa0\xa0\xa0int blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;\n\xa0\n\xa0\xa0\xa0\xa0red = gdImageColorAllocate(img, 255, 0, 0); // 紅色\n\xa0\xa0\xa0\xa0white = gdImageColorAllocate(img, 255, 255, 255); // 白色\n\xa0\xa0\xa0\xa0blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色\n\xa0\n\xa0\xa0\xa0\xa0gdImageFilledRectangle(img, 0, 0, width, height, red);\n\xa0\xa0\xa0\xa0gdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);\n\xa0\xa0\xa0\xa0draw_white_sun(img, center_x, center_y, sunS_radius, white);\n\xa0\xa0\xa0\xa0gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\n\xa0\xa0\xa0\xa0gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n\xa0\n\xa0\xa0\xa0\xa0// 在青天與滿地紅的圖案中以白色畫線繪製連接菱形的四個關鍵點\n\xa0\xa0\xa0\xa0gdImageSetThickness(img, 10); // 設置線條粗度為10\n\xa0\xa0\xa0\xa0gdImageLine(img, 429, 125, 279, 165, white);\n\xa0\xa0\xa0\xa0gdImageLine(img, 279, 165, 170, 274, white);\n\xa0\xa0\xa0\xa0gdImageLine(img, 170, 274, 170, 274, white);\n\xa0\xa0\xa0\xa0gdImageLine(img, 429, 125, 170, 274, white); // 加入第四條連線\n}\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color) {\n\xa0\xa0\xa0\xa0// 實現 draw_white_sun 函數的內容\n\xa0\xa0\xa0\xa0// 可以在此處繪製白日的內部圖案\n} \n \n \n \n \xa0 \n (2) \n 承上題，請列出第二組ABED的四條直線與白日中的大圓所相交（相交）的四個點座標。 \n // https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China \n// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621 \n// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library \n// https://www.rapidtables.com/web/color/RGB_Color.html \n// 幾何形狀著色與繪圖練習 \n// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖 \n#include <stdio.h> \n#include <gd.h> \n#include <math.h> \n \nvoid draw_roc_flag(gdImagePtr img); \nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color); \n \nint main() { \n    // width 3: height 2 \n    int width = 1200; \n    // 國旗長寬比為 3:2 \n    int height = (int)(width*2.0 / 3.0); \n \n    gdImagePtr img = gdImageCreateTrueColor(width, height); \n    gdImageAlphaBlending(img, 0); \n \n    draw_roc_flag(img); \n \n    FILE *outputFile = fopen("roc_flag_in_gd.png", "wb"); \n    if (outputFile == NULL) { \n        fprintf(stderr, "Error opening the output file.\\n"); \n        return 1; \n    } \n    gdImagePngEx(img, outputFile, 9); \n    fclose(outputFile); \n    gdImageDestroy(img); \n    return 0; \n} \nvoid draw_roc_flag(gdImagePtr img) { \n    int width = gdImageSX(img); \n    int height = gdImageSY(img); \n    int red, white, blue; \n    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處 \n    int center_x = (int)(width/4); \n    int center_y = (int)(height/4); \n    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖 \n    // 由於中央白日圓形的半徑為青天寬度的 1/8 \n    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8 \n    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8 \n    int sun_radius = (int)(width/8); \n    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑 \n    int white_circle_dia = sun_radius; \n    // 中央藍色圓形半徑為中央白日的 1又 2/15 \n    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15; \n    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值 \n    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色 \n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色 \n    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色 \n    // 根據畫布大小塗上紅色長方形區域 \n    gdImageFilledRectangle(img, 0, 0, width, height, red); \n    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色 \n    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue); \n  {int x1 = 429; \n   int y1 = 125; \n   int x2 = 279; \n   int y2 = 165; \n   gdImageSetThickness(img, 10); // 設置線條寬度為10\n   gdImageLine(img, x1, y1, x2, y2, white); // 畫線\n   // 畫一條線連接兩個點 \n   gdImageLine(img, x1, y1, x2, y2, white); \n  } \n  {int x1 = 170; \n     int y1 = 274; \n     int x2 = 279; \n     int y2 = 165; \n \n     // 畫一條線連接兩個點 \n     gdImageLine(img, x1, y1, x2, y2, white); \n  } \n  { \n    int x1 = 170; \n     int y1 = 274; \n     int x2 = 429; \n     int y2 = 125; \n \n     // 畫一條線連接兩個點 \n     gdImageLine(img, x1, y1, x2, y2, white); \n  } \n  // 利用一個藍色大圓與白色小圓畫出藍色環狀 \n  gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue); \n  gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white); \n \n \n  // 定義座標結構 \n  typedef struct { \n      double x; \n      double y; \n  } Point; \n \n  // 計算圓與線的交點 \n  void circleLineIntersection(double h, double k, double r, double x1, double y1, double x2, double y2) { \n      // 直線斜率 \n      double m = (y2 - y1) / (x2 - x1); \n \n      // 直線方程式中的常數項 \n      double b = y1 - m * x1; \n \n      // 圓與直線交點的計算 \n      double A = 1 + pow(m, 2); \n      double B = 2 * (m * b - m * k - h); \n      double C = pow(k, 2) - pow(r, 2) + pow(h, 2) - 2 * b * k + pow(b, 2); \n \n      // 判斷交點個數 \n    double discriminant = pow(B, 2) - 4 * A * C; \n    if (discriminant > 0) { \n        double x_intersect1 = (-B + sqrt(discriminant)) / (2 * A); \n        double y_intersect1 = m * x_intersect1 + b; \n        printf("交點: (%.2f, %.2f)\\n", x_intersect1, y_intersect1); \n \n        double x_intersect2 = (-B - sqrt(discriminant)) / (2 * A); \n        double y_intersect2 = m * x_intersect2 + b; \n        printf("交點: (%.2f, %.2f)\\n", x_intersect2, y_intersect2); \n    } else if (discriminant == 0) { \n        double x_intersect = -B / (2 * A); \n        double y_intersect = m * x_intersect + b; \n        printf("交點: (%.2f, %.2f)\\n", x_intersect, y_intersect); \n    } else { \n        printf("No points.\\n"); \n    } \n \n  } \n      // 圓的參數 \n      double circle_x = (int)(width/4); // 圓心 x 座標 \n      double circle_y = (int)(height/4); // 圓心 y 座標 \n      double radius = white_circle_dia +  white_circle_dia*2/15; // 圓半徑 \n      // 兩點座標 \n  double x3 = 170; \n  double y3 = 274; \n  double x4 = 279; \n  double y4 = 165; \n \n  circleLineIntersection(circle_x, circle_y, radius, x4, y4, x3, y3); \n \n  double x5 = 279; \n  double y5 = 165; \n  double x6 = 429; \n  double y6 = 125; \n \n  circleLineIntersection(circle_x, circle_y, radius, x6, y6, x5, y5); \n  } \n \n', 'tags': '', 'url': 'W15.html'}, {'title': 'w16', 'text': '(1) \n #include <gd.h>\n#include <stdio.h>\n#include <math.h>\n\n#define WIDTH 800\n#define HEIGHT 600\n#define SCALE 100\n\n//繪製電阻形狀\nvoid drawResistor(gdImagePtr im, int x1, int y, int width, int height) {\nint startX = x1 ;\nint endX = x1 + width ;\n\n// 第一段直線向前走一段\ngdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));\n\n// 向上45度\ngdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n// 向下90度\ngdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n// 向上90度\ngdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n// 向下90度\ngdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n// 向上90度\ngdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2 , startX + width / 4 + height / 2 + 4 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n// 向下90度\ngdImageLine(im, startX + width / 4 + height / 2 + 4 * height, y - height / 2, startX + width / 4 + height / 2 + 5 * height, y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n// 向上45度\ngdImageLine(im, startX + width / 4 + height / 2 + 5 * height, y + height / 2, startX + width / 4 + height / 2 + 5 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));\n\ngdImageLine(im, startX + width / 4 + height / 2 + 5 * height + height / 2, y, startX + width / 4 + height / 2 + 5 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));\n\n\n{\nint startX = 100;\ngdImageColorAllocate(im, 0, 0, 255);\n\n\n// 第一段直線向前走一段\ngdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));\n\n// 向上45度\ngdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n// 向下90度\ngdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n// 向上90度\ngdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n// 向下90度\ngdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n// 向上45度\ngdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2, startX + width / 4 + height / 2 + 3 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));\n\ngdImageLine(im, startX + width / 4 + height / 2 + 3 * height + height / 2, y, startX + width / 4 + height / 2 + 3 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));\n}\n\n{\nint startX = 585;\ngdImageColorAllocate(im, 0, 0, 255);\n\n\n// 第一段直線向前走一段\ngdImageLine(im, startX, y, startX + width / 4 , y, gdImageColorAllocate(im, 0, 0, 255));\n\n// 向上45度\ngdImageLine(im, startX + width / 4 , y, startX + width / 4 + height / 2 , y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n// 向下90度\ngdImageLine(im, startX + width / 4 + height / 2, y - height / 2 , startX + width / 4 + height / 2 + height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n// 向上90度\ngdImageLine(im, startX + width / 4 + height / 2 + height, y + height / 2, startX + width / 4 + height / 2 + 2 * height, y - height / 2, gdImageColorAllocate(im, 0, 0, 255));\n// 向下90度\ngdImageLine(im, startX + width / 4 + height / 2 + 2 * height , y - height / 2, startX + width / 4 + height / 2 + 3 * height , y + height / 2, gdImageColorAllocate(im, 0, 0, 255));\n\n// 向上45度\ngdImageLine(im, startX + width / 4 + height / 2 + 3 * height, y + height / 2, startX + width / 4 + height / 2 + 3 * height + height / 2, y, gdImageColorAllocate(im, 0, 0, 255));\n\ngdImageLine(im, startX + width / 4 + height / 2 + 3 * height + height / 2, y, startX + width / 4 + height / 2 + 3 * height + height / 2 +5 , y, gdImageColorAllocate(im, 0, 0, 255));\n\ngdImageLine(im, 100, y +20, 700, y +20, gdImageColorAllocate(im, 0, 255, 0));\n\n}\n}\n\nint main() {\ngdImagePtr im;\nFILE *outputFile;\n\n// 創建圖像物件\nim = gdImageCreateTrueColor(WIDTH, HEIGHT);\nif (im == NULL) {\nfprintf(stderr, "Error creating GD image.\\n");\nreturn 1;\n}\n\noutputFile = fopen("1.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "Error opening the output file.\\n");\nreturn 1;\n}\n\n//配置顏色\nint black, white, red, blue, green;\n\nblack = gdImageColorAllocate(im, 0, 0, 0);\nwhite = gdImageColorAllocate(im, 255, 255, 255);\nred = gdImageColorAllocate(im, 255, 0, 0);\nblue = gdImageColorAllocate(im, 0, 0, 255);\ngreen = gdImageColorAllocate(im, 0, 255, 0);\ngdImageFilledRectangle(im, 0, 0, WIDTH - 1, HEIGHT - 1, white);\n\n// 繪製牆面\ngdImageLine(im, SCALE, SCALE, SCALE, HEIGHT - SCALE, black);\ngdImageLine(im, WIDTH - SCALE, SCALE, WIDTH - SCALE, HEIGHT - SCALE, black);\n\n// 繪製彈簧(電阻)\ndrawResistor(im, WIDTH / 3 + SCALE / 2, HEIGHT / 2, SCALE / 2, SCALE / 4);\n\n// 繪製質量（方形）\ngdImageFilledRectangle(im, WIDTH / 3 - SCALE / 2, HEIGHT / 2 - SCALE / 2, WIDTH / 3 + SCALE / 2, HEIGHT / 2 + SCALE / 2, red);\ngdImageFilledRectangle(im, WIDTH * 2 / 3 - SCALE / 2, HEIGHT / 2 - SCALE / 2, WIDTH * 2 / 3 + SCALE / 2, HEIGHT / 2 + SCALE / 2, red);\n\ngdImageFilledRectangle(im, 100, HEIGHT +300, 700, HEIGHT /2 +49 , black);\n\n\n//生成圖片\ngdImagePng(im, outputFile);\nfclose(outputFile);\ngdImageDestroy(im);\n\nreturn 0;\n} \n \n \n (2) \n #include <stdio.h>\n#include <math.h>\n\xa0\n#define TIME_STEP 0.01 // 時間步長\n#define SIMULATION_TIME 10.0 // 模擬時間\n\xa0\n// 物體參數\n#define m1 2.0\n#define m2 3.0\n#define k1 0.5\n#define k2 1.0\n#define k3 1.5\n#define c1 0.25\n#define c2 0.33\n#define c3 0.5\n#define X1_initial 1.0\n#define X2_initial -0.5\n#define V0 0.0\n\xa0\n// 計算阻尼力\ndouble dampingForce(double c, double v) {\n\xa0\xa0\xa0\xa0return -c * v;\n}\n\xa0\n// 模擬物體運動\nvoid simulateMotion() {\n\xa0\xa0double X1 = X1_initial;\n\xa0\xa0double X2 = X2_initial;\n\xa0\xa0double V1 = V0;\n\xa0\xa0double V2 = V0;\n\xa0\n\xa0\xa0FILE *fp;\n\xa0\xa0fp = fopen("motion_data.txt", "w");\n\xa0\n\xa0\xa0for (double t = 0; t <= SIMULATION_TIME; t += TIME_STEP) {\n\xa0\xa0double F1 = -k1 * (X1 - 0) - c1 * (V1 - 0); // 第一個物體受到的合力\n\xa0\xa0double F2 = -k2 * (X2 - X1) - c2 * (V2 - V1); // 第二個物體受到的合力\n\xa0\xa0double F3 = -k3 * (X2 - 0) - c3 * (V2 - 0); // 第二個物體受到的合力\n\xa0\n\xa0\xa0double a1 = F1 / m1; // 第一個物體的加速度\n\xa0\xa0double a2 = F2 / m2; // 第二個物體的加速度\n\xa0\n// 更新速度和位置\n\xa0\xa0\xa0V1 += a1 * TIME_STEP;\n\xa0\xa0\xa0V2 += a2 * TIME_STEP;\n\xa0\n\xa0\xa0X1 += V1 * TIME_STEP;\n\xa0\xa0X2 += V2 * TIME_STEP;\n\xa0\n// 在文件寫入時紀錄 m1 和 m2 的位置和速度數據\n\xa0\xa0fprintf(fp, "%lf %lf %lf %lf %lf\\n", t, X1, X2, V1, V2);\n\xa0\xa0\xa0\xa0}\n\xa0\n\xa0\n\xa0\xa0fclose(fp);\n}\n\xa0\nint main() {\n\xa0\xa0\xa0\xa0simulateMotion();\n\xa0\xa0\xa0\xa0return 0;\n} \n \n 圖檔 \n #include <stdio.h>\n \nint main() {\n    FILE *gnuplotPipe = popen("gnuplot", "w");\n    if (gnuplotPipe) {\n        fprintf(gnuplotPipe, "set terminal png\\n");\n        fprintf(gnuplotPipe, "set output \'motion_plot.png\'\\n");\n        fprintf(gnuplotPipe, "set xlabel \'Time\'\\n");\n        fprintf(gnuplotPipe, "set ylabel \'Position / Velocity\'\\n");\n        fprintf(gnuplotPipe, "plot \'motion_data.txt\' using 1:2 with lines title \'m1 position\', \'motion_data.txt\' using 1:3 with lines title \'m2 position\', \'motion_data.txt\' using 1:4 with lines title \'m1 velocity\', \'motion_data.txt\' using 1:5 with lines title \'m2 velocity\'\\n");\n        fprintf(gnuplotPipe, "exit\\n");\n        fflush(gnuplotPipe);\n        pclose(gnuplotPipe);\n    } else {\n        printf("Error opening pipe to Gnuplot.\\n");\n    }\n    return 0;\n} \n \n', 'tags': '', 'url': 'w16.html'}, {'title': 'c_EX', 'text': '', 'tags': '', 'url': 'c_EX.html'}, {'title': 'Exercises1', 'text': '(1)C 標準輸出函數 \n #include <stdio.h>\nvoid main()\n{\n /* 印出 Hello */\nprintf("Hello World!");\n} \n \n (2  )C 標準輸出函數 \n #include <stdio.h>\nint main()\n{\n/* 印出 Hello World! Bye Bye */\nprintf("Hello World! ");\nprintf("Bye ");\nprintf("Bye");\nreturn 0;\n} \n \n (3)c變數宣告 \n #include <stdio.h>\nint main()\n{\nint a = 1;\nint A = 8;\nint b = 2, c;\nc = A - a + b;\n/* 輸出 a, A, b, c 到螢幕 */\nprintf( "a = %d, A = %d, b = %d, c = %d ", a, A, b, c );\nreturn 0;\n}\n \n \n (4)C 的浮點數運算 \n #include <stdio.h>\nvoid main()\n{\nfloat a = 0.5;\ndouble b = 1.2;\nint c = 3;\nb = b + a + c;\n/* 輸出 a, b, c 到螢幕 */\nprintf( " a = %3.1f, b = %3.1f, c = %d ", a ,b, c );\n} \n \n (5)C 字元型態 \n #include <stdio.h>\nint main()\n{\nchar x, y;\nx = \'a\';\ny = (char)97;\n/* 輸出 x, y, x, 最後一個是以 ASCII 值顯示 y */\nprintf( " x = %c, y = %c, ASCII of y = %d", x, y, y );\nreturn 0;\n} \n \n (6)常數數字表示法 \n #include <stdio.h>\n\nint main() {\n    int a = 64;\n    int b = 0x40;\n    long c = 64L;\n\n    printf("%d,%d,%ld", a, b, c);  // 使用 %ld 來打印 long 整數型別的變數 c\n\n    return 0;\n}\n \n \n \n \n (7)算術運算元 \n #include<stdio.h>\nint main()\n{\nint a,b;\na = 10; b = 3;\nprintf( "%d \\n", a * b );\nprintf( "%d \\n", a / b );\nprintf( "%d \\n", a + b );\nprintf( "%d \\n", a - b );\nprintf( "%d \\n", a % b );\nreturn 0;\n} \n \n \n (8)位元運算元 \n #include<stdio.h>\nvoid main()\n{\nint a,b;\na = 15;\nb = 1;\nprintf("%d \\n", a | b ); /* a OR b */\nprintf("%d \\n", a & b ); /* a AND b */\nprintf("%d \\n", a ^ b ); /* a XOR b */\nprintf("%d \\n", a << 1 ); /* a 位元左移 1 位 */\nprintf("%d \\n", a >> 1 ); /* a 位元右移一位 */\nprintf("%d \\n", ~a ); /* A 的補數運算 */\n} \n \n \n (9)邏輯運算元 \n #include <stdio.h>\nvoid main()\n{\nint a;\na = 3;\nprintf("%d\\n", !a );\na = 0;\nprintf("%d\\n", !a );\n} \n \n \n (10)Logical AND \n #include <stdio.h>\nvoid main()\n{\nprintf("%d\\n", 1 && 3 );\nprintf("%d\\n", 0 && 0 );\nprintf("%d\\n", 2 && 2 );\n} \n \n \n', 'tags': '', 'url': 'Exercises1.html'}, {'title': 'Exercises2', 'text': '(1) Logical OR \n #include <stdio.h>\nvoid main()\n{\nprintf("%d\\n", 1 || 0 );\nprintf("%d\\n", 0 || 0 );\nprintf("%d\\n", 2 || 2 );\n} \n \n \n (2) sizeof 範例 \n #include <stdio.h> void main() { char a; printf( " The size of int is %d \\n", sizeof(int) ); printf( " The size of char a is %d \\n", sizeof(a) ); } \n \n (3) if 範例 \n #include <stdio.h>\n\nint main() {\n    char ch; \n    printf("input a char: ");\n    scanf("%c", &ch);\n    if (ch == \'a\') {\n        printf("You pressed \'a\'\\n");\n    }\n    return 0;\n}\n \n \n (4) if 與 else 範例 \n #include <stdio.h>\n\nint main() {\n    char ch; \n    printf("input a char: ");\n    scanf("%c", &ch);\n    if (ch == \'a\') {\n        printf("You pressed \'a\'\\n");\n    } else {\n        printf("You didn\'t press \'a\'\\n");\n    }\n    return 0;\n}\n \n \n (5)if 與 else 範例2 \n #include <stdio.h>\n \nint main() {\n    int i; \n    printf("input an integer: ");\n    scanf("%d", &i);\n \n    if (i < 100) {\n        printf("i < 100\\n");\n    } else {\n        if ((i >= 100) && (i < 200)) {\n            printf("i >= 100 and i < 200\\n");\n        } else {\n            printf("i >= 200\\n");\n        }\n    }\n \n    return 0;\n} \n \n (6)switch - case 範例 \n #include <stdio.h>\n \nint main() {\n    char c;\n    printf("Input a char: ");\n    scanf(" %c", &c); // 加入一個空格在 %c 前，以排除之前的輸入緩衝區中的換行符號\n \n    switch(c) {\n        case \'a\':\n            printf("You pressed \'a\'\\n");\n            break;\n        case \'b\':\n            printf("You pressed \'b\'\\n");\n            break;\n        case \'c\':\n            printf("You pressed \'c\'\\n");\n            break;\n        default:\n            printf("Not \'a\', \'b\', or \'c\'\\n");\n            break;\n    }\n \n    return 0;\n}\n \n \n (7)switch - case 範例 \n #include <stdio.h>\n \nint main() {\n    char c;\n    printf("Input a char: ");\n    scanf(" %c", &c);\n \n    switch(c) {\n        case \'a\':\n            printf("You pressed \'a\'\\n");\n            break;\n        case \'b\':\n            printf("You pressed \'b\'\\n");\n            break;\n        case \'c\':\n            printf("You pressed \'c\'\\n");\n            break;\n        default:\n            printf("Not \'a\', \'b\', or \'c\'\\n");\n            break;\n    }\n \n    return 0;\n} \n \n (8)Program 1 - for \n #include<stdio.h>\n \nvoid main() {\n    int i;\n    for (i = 0; i < 6; i++) {\n        printf("%d\\n", i); /* 印出 i */\n    }\n} \n \n (9)Program 2 - for \n #include <stdio.h>\nvoid main()\n{\nint i, j;\nfor ( i = 0, j = 10; i < 6; i++, j++ )\n{\nprintf( "i = %d, ", i );\nprintf( "j = %d \\n", j );\n}\n} \n \n (10)Program 3 - for \n #include <stdio.h>\nvoid main()\n{\nint i, j;\nj = 10; /* 迴圈外先設定初值 */\nfor ( i = 0; i < 6; i++ )\n{\nprintf( "i = %d, ", i );\nprintf( "j = %d \\n", j );\nj++; /* 迴圈後加上變更運算式 */\n}\n} \n \n', 'tags': '', 'url': 'Exercises2.html'}, {'title': 'ANSIC', 'text': '', 'tags': '', 'url': 'ANSIC.html'}, {'title': '練習1', 'text': '(1)計算球體體積 \n #include <stdio.h>\n\nconst float PI = 3.6939937510;\n\nint main() {\n    float myradius;          // Radius of the sphere\n    float myvolume;          // Volume of the sphere (to be computed)\n    char line_text[50];      // A line from the keyboard\n\n    printf("Input the radius of the sphere: ");\n    \n    if (fgets(line_text, sizeof(line_text), stdin) == NULL) {\n        perror("Error reading input");\n        return 1;  // Indicate an error\n    }\n\n    if (sscanf(line_text, "%f", &myradius) != 1) {\n        fprintf(stderr, "Error: Invalid input. Please enter a valid number.\\n");\n        return 1;  // Indicate an error\n    }\n\n    if (myradius < 0) {\n        fprintf(stderr, "Error: Radius cannot be negative.\\n");\n        return 1;  // Indicate an error\n    }\n\n    myvolume = (4.0 / 3.0) * PI * (myradius * myradius * myradius);\n    printf("The volume of the sphere is %f.\\n", myvolume);\n\n    return 0;   // Return 0 to indicate successful execution of the program.\n}\n \n \n \n (2)判定 閏年 \n \n #include <stdio.h>\n\nint main() {\n    int chk_year;   // Declare an integer variable \'chk_year\'.\n\n    printf("Input a year: ");   // Prompt the user to input a year.\n\n    // Check the return value of scanf for successful input\n    if (scanf("%d", &chk_year) != 1) {\n        printf("Error: Invalid input. Please enter a valid year.\\n");\n        return 1;  // Return 1 to indicate an error.\n    }\n\n    if ((chk_year % 400) == 0 || ((chk_year % 100) != 0 && (chk_year % 4) == 0)) {\n        // Check if \'chk_year\' is divisible by 400 or (divisible by 4 but not divisible by 100).\n        printf("%d is a leap year.\\n", chk_year);   // Print a message indicating that \'chk_year\' is a leap year.\n    } else {\n        printf("%d is not a leap year.\\n", chk_year);   // Print a message indicating that \'chk_year\' is not a leap year.\n    }\n\n    return 0;   // Return 0 to indicate successful execution of the program.\n}\n \n \n \n (3) 計算交易損益 \n #include <stdio.h>\n\nint main(void) {\n    int cprice, sprice, plamt;  // Declare variables to store cost price, selling price, and profit/loss amount.\n\n    printf("Input Cost Price: ");  // Prompt user for input of cost price.\n    if (scanf("%d", &cprice) != 1) {\n        printf("Error: Invalid input for cost price.\\n");\n        return 1;  // Indicate an error\n    }\n\n    printf("Input Selling Price: ");  // Prompt user for input of selling price.\n    if (scanf("%d", &sprice) != 1) {\n        printf("Error: Invalid input for selling price.\\n");\n        return 1;  // Indicate an error\n    }\n\n    if (sprice > cprice)  // Check if selling price is greater than cost price.\n    {  \n        plamt = sprice - cprice;  // Calculate profit amount.\n        printf("\\nYou can book your profit amount: %d\\n", plamt);  // Print profit message.\n    }  \n    else if (cprice > sprice)  // Check if cost price is greater than selling price.\n    {  \n        plamt = cprice - sprice;  // Calculate loss amount.\n        printf("\\nYou incurred a loss of amount: %d\\n", plamt);  // Print loss message.\n    }  \n    else  // If neither profit nor loss.\n    {  \n        printf("\\nYou are in a no profit, no loss condition.\\n");  // Print message for no profit, no loss.\n    }  \n\n    return 0;  // Return 0 to indicate successful execution of the program.\n}\n \n \n \n \n (4) 用 C 寫一個程式來接受成績並聲明等效描 \n #include <stdio.h>\n#include <ctype.h>\n#include <string.h>\n\nint main() {\n    char notes[20];  // 增加註解陣列的大小以容納更長的字串。\n    char grd;\n\n    printf("請輸入成績：");\n    if (scanf(" %c", &grd) != 1) {\n        fprintf(stderr, "讀取成績時發生錯誤。\\n");\n        return 1;  // 返回非零以表示錯誤。\n    }\n\n    grd = toupper(grd);\n\n    switch (grd) {\n        case \'E\':\n            strncpy(notes, "優秀", sizeof(notes));\n            break;\n        case \'V\':\n            strncpy(notes, "很好", sizeof(notes));\n            break;\n        case \'G\':\n            strncpy(notes, "好", sizeof(notes));\n            break;\n        case \'A\':\n            strncpy(notes, "普通", sizeof(notes));\n            break;\n        case \'F\':\n            strncpy(notes, "不及格", sizeof(notes));\n            break;\n        default:\n            strncpy(notes, "無效的成績\\n", sizeof(notes));\n            break;\n    }\n\n    printf("您選擇了：%s\\n", notes);\n\n    return 0;\n}\n \n \n \n \n \n (5)計算該月天數 \n #include <stdio.h>\n\nint main() {\n    int monno;  // Declare a variable to store the input month number.\n\n    printf("Input Month No : ");  // Prompt the user to input a month number.\n\n    // Check the return value of scanf for successful input\n    if (scanf("%d", &monno) != 1) {\n        printf("Invalid input. Please enter a valid month number.\\n");\n        return 1;  // Indicate an error\n    }\n\n    switch(monno)  // Start a switch statement based on the input month number.\n    {\n        case 1:\n        case 3:\n        case 5:\n        case 7:\n        case 8:\n        case 10:\n        case 12:\n            printf("Month has 31 days.\\n");  // Print a message for months with 31 days.\n            break;\n        case 2:\n            printf("The 2nd month is February and has 28 or 29 days.\\n");  // Print a message for February with 28 or 29 days.\n            break;\n        case 4:\n        case 6:\n        case 9:\n        case 11:\n            printf("Month has 30 days.\\n");  // Print a message for months with 30 days.\n            break;\n        default:\n            printf("Invalid Month number.\\nPlease try again....\\n");  // Print a message for an invalid input.\n            break;\n    }\n\n    return 0;  // Indicate successful execution\n}\n \n \n \n \n (6) 定整數乘法表 \n #include <stdio.h>  // Include the standard input/output header file.\n\nint main() {\n    int j, n;  // Declare variables \'j\' for loop counter and \'n\' for user input.\n\n    printf("Input the number (Table to be calculated) : ");  // Print a message to prompt user input.\n\n    // Check the return value of scanf for errors\n    if (scanf("%d", &n) != 1) {\n        printf("Error reading input.\\n");\n        return 1;  // Indicate an error\n    }\n\n    printf("\\n");  // Print a newline for formatting.\n\n    for (j = 1; j <= 10; j++) {  // Start a for loop to calculate the table up to 10.\n        printf("%d X %d = %d \\n", n, j, n * j);  // Print the multiplication expression and result.\n    }\n\n    return 0;  // Return 0 to indicate successful execution of the program.\n}\n \n \n \n (7)計算階乘 \n #include <stdio.h>  // Include the standard input/output header file.\n\nint main() {\n    int i, f = 1, num;  // Declare variables \'i\' for loop counter, \'f\' to store factorial, \'num\' for user input.\n\n    printf("Input the number : ");  // Print a message to prompt user input.\n\n    if (scanf("%d", &num) != 1) {\n        printf("Error: Please enter a valid integer.\\n");\n        return 1;  // Indicate an error\n    }\n\n    for (i = 1; i <= num; i++)  // Start a loop to calculate factorial.\n        f = f * i;  // Calculate factorial.\n\n    printf("The Factorial of %d is: %d\\n", num, f);  // Print the calculated factorial.\n \n \n \n (8)尋找範圍內 質數 \n #include <stdio.h> // Include the standard input/output header file.\n\nint main() {\n    int num, i, ctr, stno, enno; // Declare variables for the number, loop counters, and range.\n\n    // Prompt the user to input the starting number of the range.\n    printf("Input starting number of range: ");\n    if (scanf("%d", &stno) != 1) {\n        printf("Error: Invalid input for starting number.\\n");\n        return 1; // Return a non-zero value to indicate an error.\n    }\n\n    // Prompt the user to input the ending number of the range.\n    printf("Input ending number of range : ");\n    if (scanf("%d", &enno) != 1) {\n        printf("Error: Invalid input for ending number.\\n");\n        return 1; // Return a non-zero value to indicate an error.\n    }\n\n    // Print the message indicating the range.\n    printf("The prime numbers between %d and %d are: \\n", stno, enno);\n\n    for (num = stno; num <= enno; num++) { // Loop through the numbers in the specified range.\n        ctr = 0; // Initialize the counter.\n\n        for (i = 2; i <= num / 2; i++) { // Loop through possible divisors.\n            if (num % i == 0) { // If a divisor is found...\n                ctr++; // ...increment the counter.\n                break; // Exit the loop.\n            }\n        }\n\n        if (ctr == 0 && num != 1) // If no divisors were found and the number is not 1...\n            printf("%d ", num); // ...print the prime number.\n    }\n\n    printf("\\n"); // Move to the next line after printing all prime numbers.\n\n    return 0; // Return 0 to indicate successful execution.\n}\n \n \n \n (9) 自然數平方的 n 項及其和 \n #include <stdio.h>\n\nint main() {\n    int i, n, sum = 0;\n\n    printf("Input the number of terms : ");\n\n    // Check the return value of scanf\n    if (scanf("%d", &n) != 1) {\n        fprintf(stderr, "Error: Please enter a valid number.\\n");\n        return 1; // Return a non-zero value to indicate an error\n    }\n\n    printf("\\nThe square natural numbers up to %d terms are :", n);\n\n    for (i = 1; i <= n; i++) {\n        printf("%d  ", i * i);\n        sum += i * i;\n    }\n\n    printf("\\nThe Sum of Square Natural Numbers up to %d terms = %d \\n", n, sum);\n\n    return 0;\n}\n \n \n \n (10) 計算時間 \n #include <stdio.h>\n\nint hrs;          /* given number of hours */\nint mins;         /* given number of minutes */\nint tot_mins;     /* total number of minutes (to be computed) */\n\nconst int MIN_PER_HOUR = 60;      /* number of minutes in an hour */\n\nchar line_text[50];      /* line of input from keyboard */\n\nint main() {\n    printf("Input hours: ");   // Prompt the user to input hours.\n    if (fgets(line_text, sizeof(line_text), stdin) == NULL) {\n        perror("Error reading hours");\n        return 1; // Return non-zero to indicate an error.\n    }\n    if (sscanf(line_text, "%d", &hrs) != 1) {\n        printf("Error: Please enter a valid number for hours.\\n");\n        return 1; // Return non-zero to indicate an error.\n    }\n\n    printf("Input minutes: ");   // Prompt the user to input minutes.\n    if (fgets(line_text, sizeof(line_text), stdin) == NULL) {\n        perror("Error reading minutes");\n        return 1; // Return non-zero to indicate an error.\n    }\n    if (sscanf(line_text, "%d", &mins) != 1) {\n        printf("Error: Please enter a valid number for minutes.\\n");\n        return 1; // Return non-zero to indicate an error.\n    }\n\n    tot_mins = mins + (hrs * MIN_PER_HOUR);   // Calculate the total number of minutes.\n\n    printf("Total: %d minutes.\\n", tot_mins);   // Print the total number of minutes.\n\n    return 0;   // Return 0 to indicate successful execution of the program.\n}\n \n \n \n', 'tags': '', 'url': '練習1.html'}, {'title': 'EX1', 'text': '(11)速度單位換算 \n #include <stdio.h>\n\nfloat kmph;              /* kilometers per hour */\nfloat miph;              /* miles per hour (to be computed) */\nchar  line_text[50];      /* a line from the keyboard */\n\nint main() {\n    printf("Input kilometers per hour: ");   // Prompt the user to input kilometers per hour.\n    \n    // Check the return value of fgets for errors\n    if (fgets(line_text, sizeof(line_text), stdin) == NULL) {\n        perror("Error reading input");\n        return 1; // Return non-zero to indicate an error.\n    }\n\n    // Check the return value of sscanf for errors\n    if (sscanf(line_text, "%f", &kmph) != 1) {\n        printf("Error: Please enter a valid number for kilometers per hour.\\n");\n        return 1; // Return non-zero to indicate an error.\n    }\n\n    miph = kmph * 0.6213712;   // Convert kilometers per hour to miles per hour.\n    printf("%f miles per hour\\n", miph);   // Print the result in miles per hour.\n\n    return 0;   // Return 0 to indicate successful execution of the program.\n} \n \n \n (12) 用 C 語言編寫一個程序，讀取名字、姓氏和出生年份，並依序顯示姓名和年份。 \n #include <stdio.h>\n\nint main() {\nchar firstname[20], lastname[20];\nint bir_year;\n\nprintf("Input your firstname: ");\n\n// Check the return value of scanf to handle input errors\nif (scanf("%19s", firstname) != 1) {\nfprintf(stderr, "Error reading firstname.\\n");\nreturn 1; // Return non-zero to indicate an error.\n}\n\nprintf("Input your lastname: ");\nif (scanf("%19s", lastname) != 1) {\nfprintf(stderr, "Error reading lastname.\\n");\nreturn 1; // Return non-zero to indicate an error.\n}\n\nprintf("Input your year of birth: ");\nif (scanf("%d", &bir_year) != 1) {\nfprintf(stderr, "Error reading year of birth.\\n");\nreturn 1; // Return non-zero to indicate an error.\n}\n\nprintf("%s %s %d\\n", firstname, lastname, bir_year);\n\nreturn 0;\n}\n\n \n \n \n \n (13) 如果給定兩個角，請寫一個 C 程式來求三角形的第三個角。 \n #include <stdio.h>\n\nint main() {\n    int ang1, ang2, ang3; // three angles of a triangle\n\n    // Read two angles of the triangle from the user separated by a comma\n    printf("Input two angles of a triangle separated by a comma: ");\n    \n    // Check the return value of scanf to handle input errors\n    if (scanf("%d, %d", &ang1, &ang2) != 2) {\n        fprintf(stderr, "Error reading input. Please provide two integers separated by a comma.\\n");\n        return 1;  // Return non-zero to indicate an error.\n    }\n\n    ang3 = 180 - (ang1 + ang2); // Calculate the third angle\n\n    printf("Third angle of the triangle: %d\\n", ang3);\n\n    return 0;\n}\n \n \n \n (14) 寫一個 C 程序，使用矩形的高度和寬度作為輸入來列印矩形的周長。 \n #include <stdio.h>\n\nint main() {\n    float rec_width;      /* Variable to store the width of the rectangle */\n    float rec_height;     /* Variable to store the height of the rectangle */\n    float rec_perimeter;  /* Variable to store the perimeter (to be computed) */\n\n    // Prompt the user to input the height of the rectangle.\n    printf("Input the height of the Rectangle : ");\n\n    // Check the return value of scanf to ensure a valid float is entered.\n    if (scanf("%f", &rec_height) != 1 || rec_height <= 0) {\n        fprintf(stderr, "Error: Invalid input for height. Please enter a positive number.\\n");\n        return 1;  // Return non-zero to indicate an error.\n    }\n\n    // Prompt the user to input the width of the rectangle.\n    printf("Input the width of the Rectangle : ");\n\n    // Check the return value of scanf to ensure a valid float is entered.\n    if (scanf("%f", &rec_width) != 1 || rec_width <= 0) {\n        fprintf(stderr, "Error: Invalid input for width. Please enter a positive number.\\n");\n        return 1;  // Return non-zero to indicate an error.\n    }\n\n    // Calculate the perimeter of the rectangle using the formula: perimeter = 2 * ( width + height )\n    rec_perimeter = 2.0 * (rec_height + rec_width);\n\n    // Print the calculated perimeter of the rectangle.\n    printf("Perimeter of the Rectangle is : %f\\n", rec_perimeter);\n\n    return 0;  // Indicate successful program execution.\n}\n \n \n \n \n (15) 寫一個將攝氏度轉換為華氏度的程式。 \n #include <stdio.h>\n\nfloat temp_f;     /* degrees Fahrenheit */\nfloat temp_c;     /* degrees Centigrade */\nchar line_text[50];  /* a line of input */\n\nint main() {\n    printf("Input a temperature (in Centigrade): ");  // Prompt the user to input a temperature in Centigrade.\n\n    // Check the return value of fgets to handle errors\n    if (fgets(line_text, sizeof(line_text), stdin) == NULL) {\n        fprintf(stderr, "Error reading input.\\n");\n        return 1;  // Return non-zero to indicate an error.\n    }\n\n    sscanf(line_text, "%f", &temp_c);               // Convert the input from \'line_text\' to a float and store it in \'temp_c\'.\n\n    temp_f = ((9.0 / 5.0) * temp_c) + 32.0;         // Convert temperature from Centigrade to Fahrenheit and store it in \'temp_f\'.\n    printf("%f degrees Fahrenheit.\\n", temp_f);    // Print the temperature in Fahrenheit.\n\n    return 0;   // Return 0 to indicate successful execution of the program.\n}\n \n \n \n (16) 寫一個 C 程式來檢查給定的數字是偶數還是奇數。 \n \n #include <stdio.h>\n\nint main() {\n    int num1, rem1;   // Declare two integer variables \'num1\' and \'rem1\'.\n\n    printf("Input an integer: ");   // Prompt the user to input an integer.\n\n    // Check the return value of scanf\n    if (scanf("%d", &num1) != 1) {\n        fprintf(stderr, "Error reading input. Please enter a valid integer.\\n");\n        return 1;  // Return non-zero to indicate an error.\n    }\n\n    rem1 = num1 % 2;   // Calculate the remainder of \'num1\' when divided by 2.\n\n    if (rem1 == 0)   // Check if the remainder is equal to 0.\n        printf("%d is an even integer\\n", num1);   // Print a message indicating that \'num1\' is an even integer.\n    else\n        printf("%d is an odd integer\\n", num1);    // Print a message indicating that \'num1\' is an odd integer.\n\n    return 0;   // Return 0 to indicate successful execution.\n}\n \n \n \n (17) 編寫一個 C 程序，將一個數字作為輸入，併計算輸入數字與 51 之間的絕對差。如果輸入數字大於 51，它將返回絕對差的三倍。 \n #include <stdio.h> // Include standard input/output library\n\nint test(int n); // Declare the function \'test\' with an integer parameter\n\nint main(void)\n{\n    // Call the function \'test\' with argument 53 and print the result\n    printf("%d", test(53));\n\n    // Print a newline for formatting\n    printf("\\n");\n\n    // Call the function \'test\' with argument 30 and print the result\n    printf("%d", test(30));\n\n    // Print a newline for formatting\n    printf("\\n");\n\n    // Call the function \'test\' with argument 51 and print the result\n    printf("%d", test(51));\n}\n\n// Function definition for \'test\'\nint test(int n)\n{\n    const int x = 51; // Declare and initialize constant variable \'x\'\n\n    if (n > x) // Check if \'n\' is greater than \'x\'\n    {\n        return (n - x) * 3; // Return the result of the expression (n - x) multiplied by 3\n    }\n\n    return x - n; // Return the result of the expression x minus n\n}\n \n \n (18)計算平均油耗 \n #include <stdio.h>\n\nint main() {\n    int x;    // 用於存儲總里程的變數，以公里為單位\n    float y;  // 用於存儲總耗油量的變數，以升為單位\n\n    // 提示用戶輸入總里程並存入 \'x\'\n    printf("Input total distance in km: ");\n    // 檢查 scanf 的返回值，確保成功讀取一個整數\n    if (scanf("%d", &x) != 1) {\n        fprintf(stderr, "Error: Invalid input for total distance.\\n");\n        return 1;\n    }\n\n    // 提示用戶輸入總耗油量並存入 \'y\'\n    printf("Input total fuel spent in liters: ");\n    // 檢查 scanf 的返回值，確保成功讀取一個浮點數\n    if (scanf("%f", &y) != 1) {\n        fprintf(stderr, "Error: Invalid input for total fuel spent.\\n");\n        return 1;\n    }\n\n    // 計算並打印平均油耗\n    printf("Average consumption (km/lt) %.3f ", x / y);\n    printf("\\n");\n\n    return 0;\n} \n \n \n (19) 編寫一個C 程式來取得您正在使用的C 版本 \n #include <stdio.h>\n\nint main(int argc, char** argv) {\n    // Check for C standard version\n    #if __STDC_VERSION__ >=  201710L\n        printf("We are using C18!\\n");\n    #elif __STDC_VERSION__ >= 201112L\n        printf("We are using C11!\\n");\n    #elif __STDC_VERSION__ >= 199901L\n        printf("We are using C99!\\n");\n    #else\n        printf("We are using C89/C90!\\n");\n    #endif\n\n    // Indicate successful execution\n    return 0;\n} \n \n \n (20) 寫一個 C 程序，使用哈希 (#) 列印一個區塊 F，其中 F 的高度為 6 個字符，寬度為 5 個和 4 個字符。 並且還列印一個非常大的“C” \n #include <stdio.h>\n\nint main() \n{\n    // Print top line of pattern\n    printf("    ######\\n");\n\n    // Print second line of pattern\n    printf("  ##      ##\\n");\n\n    // Print lines 3 to 7 of pattern\n    printf(" #\\n");\n    printf(" #\\n");\n    printf(" #\\n");\n    printf(" #\\n");\n    printf(" #\\n");\n\n    // Print bottom line of pattern\n    printf("  ##      ##\\n");\n\n    // Print last line of pattern\n    printf("    ######\\n");\n\n    return(0);\n} \n \n', 'tags': '', 'url': 'EX1.html'}, {'title': '期末總結', 'text': '設計一乙 41223250 羅巨庭\xa0 \n \n 完成項目： \n A是否按照進度明確標示倉儲的改版歷程 \n D是否完成 上課內容 中的 Exercises \n E是否完成 \xa0 w2-w5 \xa0 週任務中的 Exercises111 \n F是否完成 \xa0 w6-w7 \xa0 週任務中的練習一與練習二 \n G是否完成 C 結合 gd 繪圖程式庫, 畫出 \xa0 PROC ( 規格 ), \xa0 United Kingdom ( 規格 ), \xa0 Japan ( 規格 )與 \xa0 South Korea ( 規格 ) Flags \n H是否完成 w16 Final Project \n \n 分數:70分 \n 課程心得：這是我第一次接觸關於計算機概論的課程，在一開始上此課程時由於沒有接觸過網站編輯和維護的關係導致製作時出現問題很多，在上課時自己也很長在跟不上課堂內容，導致自己的進度愈來越慢，但我回家時都重覆看了好幾次影片和詢問同學來補齊進度。雖然後面越來越難，但我都有努力的去跟隨上課紀錄，讓我學習到很多新的知識和技術，謝謝老師您辛苦了。 \n', 'tags': '', 'url': '期末總結.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_（程式語言） \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python教學： \n https://docs.python.org/3/tutorial/ \n Python的平衡介紹 \n 縮排（Python採用4個Spaces縮排，以介面執行範圍） \n 變數（ Python 關鍵字 ） \n 註（#單行註解、三單標註或三雙標註標註多行註解） \n 數 (整數 int(), 浮點數 float()) \n 字串 （字符串） \n print (Python 內建函數,  print() 函數式) \n Python是控制流程工具 \n 為了 \n 如果 \n 範圍 \n 開放 \n 讀 \n 清單 \n 元組 \n 字典 \n 功能 \n 嘗試...除了 \n 休息時間 \n 曾經 \n 類別 \n 此頁面示範如何在同一頁面下加入多個線上Ace編輯器與執行按鈕（ practice_html.txt 動態頁面超檔案）。 \n Practice_html.txt 動態頁面超檔案應該可以在啟動Brython時，設定分割.py檔案放入downloads/py目錄中引用。 \n 也所有即將出現的對應 html 也使用 Brython 產生，然後編寫為 類別 後，在範例匯入時交叉 實例 引用。 \n <!-- 啟動 Brython --> \n<腳本> \n視窗.onload=函數(){ \nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']}); \n} \n</> 腳本 \n 從1累加到100： \n 1加到100 \n 將 iterable 與 iterator 相關說明 ，利用 Brython 與 Ace Editor 整理頁面。 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n 文件名稱： .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n 跑步   輸出   明確輸出區 清晰的繪圖區 重新載入 \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從1累加到100第2部分： \n 1加到100 cango_三_齒輪 BS蛇 人工智慧俄羅斯區塊鏈 旋轉塊 \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n 文件名稱： .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n 跑步   輸出   明確輸出區 清晰的繪圖區 重新載入 \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};